{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 159, "column": 0}, "map": {"version":3,"sources":["file:///home/fisa/frontend-peoplegpt/app/api/post/qna/route.js"],"sourcesContent":["import { db } from '@vercel/postgres';\nimport { NextResponse } from 'next/server';\n\nexport async function GET(request) {\n    const { searchParams } = new URL(request.url);\n    const type = searchParams.get('class');\n    const client = await db.connect();\n    const isAll = Number(type) === Number(0);\n    try {\n        const query = isAll\n            ? await client.sql`\n                SELECT * FROM POST WHERE type_id = 1 AND status = 0\n                ORDER BY POST.created_at DESC\n            `\n            :\n            await client.sql`\n                SELECT * FROM POST WHERE class_id = ${type} AND type_id = 1 AND status = 0\n                ORDER BY POST.created_at DESC\n            `;\n        return NextResponse.json(query.rows);\n    } catch (error) {\n        console.log(\"QNA DB:\", error);\n        return NextResponse.json({ error: error.message }, { status: 500 });\n    }\n}\n\nexport async function POST(request) {\n    const { userId, classId, title, content, tagId } = await request.json();\n    const client = await db.connect();\n    const typeId = 1;\n    try {\n        const postTypeResult = await client.sql`\n            SELECT name FROM POST_TYPE WHERE id = ${typeId}\n        `;\n        const postType = postTypeResult.rows[0].name;\n\n        const result = await client.sql`\n            INSERT INTO POST (user_id, class_id, title, content, tag_id, type_id, status)\n            VALUES (${userId}, ${classId}, ${title}, ${content}, ${tagId}, ${typeId}, 0)\n            RETURNING *\n        `;\n        return NextResponse.json(result.rows[0]);\n    } catch (error) {\n        return NextResponse.json({ error: error.message }, { status: 500 });\n    }\n}\n\nexport async function PUT(request) {\n    // const token = request.headers.get('Authorization')?.split('Bearer ')[1];\n    // if (!token) {\n    //     return NextResponse.json({ error: 'No token provided' }, { status: 401 });\n    // }    \n    // const decoded = jwt.verify(token, process.env.JWT_SECRET);\n    // const userId = decoded.userId;\n\n    const { id, classId, title, content, tagId } = await request.json();\n    const client = await db.connect();\n\n    try {\n        const post = await client.sql`\n            SELECT * FROM POST WHERE id = ${id}\n        `;\n        if (post.rows.length === 0) {\n            return NextResponse.json({ error: 'Post not found' }, { status: 404 });\n        }\n\n        const result = await client.sql`\n            UPDATE POST \n            SET class_id = ${classId},\n                title = ${title},\n                content = ${content},\n                tag_id = ${tagId},\n                updated_at = CURRENT_TIMESTAMP\n            WHERE id = ${id}\n            RETURNING *\n        `;\n        return NextResponse.json(result.rows[0]);\n    } catch (error) {\n        return NextResponse.json({ error: error.message }, { status: 500 });\n    }\n}\n\nexport async function DELETE(request) {\n    const { searchParams } = new URL(request.url);\n    const id = searchParams.get('id');\n    const client = await db.connect();\n\n    try {\n        const post = await client.sql`\n            SELECT * FROM POST WHERE id = ${id}\n        `;\n        if (post.rows.length === 0) {\n            return NextResponse.json({ error: 'Post not found' }, { status: 404 });\n        }\n\n        await client.sql`\n            UPDATE POST \n            SET status = 1, updated_at = CURRENT_TIMESTAMP\n            WHERE id = ${id}\n        `;\n        return NextResponse.json({ message: 'Post deleted successfully' });\n    } catch (error) {\n        return NextResponse.json({ error: error.message }, { status: 500 });\n    }\n}"],"names":[],"mappings":"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"}},
    {"offset": {"line": 286, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}