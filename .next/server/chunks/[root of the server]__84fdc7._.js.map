{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 159, "column": 0}, "map": {"version":3,"sources":["file:///home/fisa/frontend-peoplegpt/app/api/post/daily/route.js"],"sourcesContent":["import { db } from '@vercel/postgres';\nimport { NextResponse } from 'next/server';\n\nexport async function GET(request) {\n    const client = await db.connect();\n    const type_id = 2;\n\n    try {\n        const post = await client.sql`\n            SELECT * FROM POST WHERE type_id = ${type_id} AND status = 0\n        `;\n        return NextResponse.json(post.rows[0]);\n    } catch (error) {\n        return NextResponse.json({ error: error.message }, { status: 500 });\n    }\n}\n\nexport async function POST(request) {\n    const { classId, title, content, tagId } = await request.json();\n    const client = await db.connect();\n    const typeId = 2;\n    const userId = 1;\n\n    try {\n        const postTypeResult = await client.sql`\n            SELECT name FROM POST_TYPE WHERE id = ${typeId}\n        `;\n        const postType = postTypeResult.rows[0].name;\n\n        const result = await client.sql`\n            INSERT INTO POST (user_id, class_id, title, content, tag_id, type_id, status)\n            VALUES (${userId}, ${classId}, ${title}, ${content}, ${tagId}, ${typeId}, 0)\n            RETURNING *\n        `;\n        return NextResponse.json(result.rows[0]);\n    } catch (error) {\n        return NextResponse.json({ error: error.message }, { status: 500 });\n    }\n}\n\nexport async function PUT(request) {\n    const { id, classId, title, content, tagId } = await request.json();\n    const client = await db.connect();\n\n    try {\n        const result = await client.sql`\n            UPDATE POST \n            SET class_id = ${classId},\n                title = ${title},\n                content = ${content},\n                tag_id = ${tagId},\n                updated_at = CURRENT_TIMESTAMP\n            WHERE id = ${id}\n            RETURNING *\n        `;\n        return NextResponse.json(result.rows[0]);\n    } catch (error) {\n        return NextResponse.json({ error: error.message }, { status: 500 });\n    }\n}\n\nexport async function DELETE(request) {\n    const { searchParams } = new URL(request.url);\n    const id = searchParams.get('id');\n    const client = await db.connect();\n\n    try {\n        const result = await client.sql`\n            UPDATE POST \n            SET status = 1\n            WHERE id = ${id}\n            RETURNING *\n        `;\n        return NextResponse.json(result.rows[0]);\n    } catch (error) {\n        return NextResponse.json({ error: error.message }, { status: 500 });\n    }\n}"],"names":[],"mappings":";;;;;;AAAA;AACA;AADA;;;AAGO,eAAe,IAAI,OAAO;IAC7B,MAAM,SAAS,MAAM,mLAAA,CAAA,KAAE,CAAC,OAAO;IAC/B,MAAM,UAAU;IAEhB,IAAI;QACA,MAAM,OAAO,MAAM,OAAO,GAAG,CAAC;+CACS,EAAE,QAAQ;QACjD,CAAC;QACD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC,KAAK,IAAI,CAAC,EAAE;IACzC,EAAE,OAAO,OAAO;QACZ,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO,MAAM,OAAO;QAAC,GAAG;YAAE,QAAQ;QAAI;IACrE;AACJ;AAEO,eAAe,KAAK,OAAO;IAC9B,MAAM,EAAE,OAAO,EAAE,KAAK,EAAE,OAAO,EAAE,KAAK,EAAE,GAAG,MAAM,QAAQ,IAAI;IAC7D,MAAM,SAAS,MAAM,mLAAA,CAAA,KAAE,CAAC,OAAO;IAC/B,MAAM,SAAS;IACf,MAAM,SAAS;IAEf,IAAI;QACA,MAAM,iBAAiB,MAAM,OAAO,GAAG,CAAC;kDACE,EAAE,OAAO;QACnD,CAAC;QACD,MAAM,WAAW,eAAe,IAAI,CAAC,EAAE,CAAC,IAAI;QAE5C,MAAM,SAAS,MAAM,OAAO,GAAG,CAAC;;oBAEpB,EAAE,OAAO,EAAE,EAAE,QAAQ,EAAE,EAAE,MAAM,EAAE,EAAE,QAAQ,EAAE,EAAE,MAAM,EAAE,EAAE,OAAO;;QAE5E,CAAC;QACD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC,OAAO,IAAI,CAAC,EAAE;IAC3C,EAAE,OAAO,OAAO;QACZ,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO,MAAM,OAAO;QAAC,GAAG;YAAE,QAAQ;QAAI;IACrE;AACJ;AAEO,eAAe,IAAI,OAAO;IAC7B,MAAM,EAAE,EAAE,EAAE,OAAO,EAAE,KAAK,EAAE,OAAO,EAAE,KAAK,EAAE,GAAG,MAAM,QAAQ,IAAI;IACjE,MAAM,SAAS,MAAM,mLAAA,CAAA,KAAE,CAAC,OAAO;IAE/B,IAAI;QACA,MAAM,SAAS,MAAM,OAAO,GAAG,CAAC;;2BAEb,EAAE,QAAQ;wBACb,EAAE,MAAM;0BACN,EAAE,QAAQ;yBACX,EAAE,MAAM;;uBAEV,EAAE,GAAG;;QAEpB,CAAC;QACD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC,OAAO,IAAI,CAAC,EAAE;IAC3C,EAAE,OAAO,OAAO;QACZ,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO,MAAM,OAAO;QAAC,GAAG;YAAE,QAAQ;QAAI;IACrE;AACJ;AAEO,eAAe,OAAO,OAAO;IAChC,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,IAAI,QAAQ,GAAG;IAC5C,MAAM,KAAK,aAAa,GAAG,CAAC;IAC5B,MAAM,SAAS,MAAM,mLAAA,CAAA,KAAE,CAAC,OAAO;IAE/B,IAAI;QACA,MAAM,SAAS,MAAM,OAAO,GAAG,CAAC;;;uBAGjB,EAAE,GAAG;;QAEpB,CAAC;QACD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC,OAAO,IAAI,CAAC,EAAE;IAC3C,EAAE,OAAO,OAAO;QACZ,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO,MAAM,OAAO;QAAC,GAAG;YAAE,QAAQ;QAAI;IACrE;AACJ"}},
    {"offset": {"line": 253, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}